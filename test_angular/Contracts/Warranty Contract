pragma solidity ^0.4.0;
contract SmartDeal {
address owner;

Provider provider;
uint provCount = 0;

uint amnt = 0;

event Deposit(address sender,address _provAddress, uint _value);

modifier onlyOwner
{
    if(msg.sender != owner) throw;
    _;
}
    
struct Provider
{
    uint goodsAmount;
    address addr;
}

function() payable 
{
     owner = msg.sender;
     amnt += msg.value;
}

function warranty(uint warrAmount) returns(bool)
{
    if (amnt>=warrAmount) return true;
    else return false;
}

function returnState() returns(uint)
{
    return amnt;
}

function init(address provAddrs, uint count) 
{
        owner = msg.sender;
        provider.addr = provAddrs;
        provCount++;
}


function pay(uint goods) onlyOwner payable returns(uint) 
{
    provider.goodsAmount += goods;
}

function checkBalance() returns (uint)
{
    return this.balance;
}


function contractDone() onlyOwner payable returns(bool)
{
   bool a = provider.addr.send(amnt);
    selfdestruct(msg.sender);
    return a;
}

function contractNotDone()onlyOwner payable 
{
 selfdestruct(msg.sender);
}


    
}
